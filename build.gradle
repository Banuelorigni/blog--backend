plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.0.4'
	id 'io.spring.dependency-management' version '1.1.0'
	id "org.flywaydb.flyway" version '9.8.1'
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'


def excludedClassDirectories = [
		'com/blog/security/JwtAuthenticationTokenFilter*',
		'com/blog/security/SecurityConfig*',
		'com/blog/security/UserPrincipalInfo*',
		'com/blog/adapter/comments/CommentDtoMapper*',
		'com/blog/infrastructure/articles/mapper/*',
		'com/blog/infrastructure/comments/mapper/*',
		'com/blog/infrastructure/tags/mapper/*',
		'com/blog/infrastructure/user/mapper/*',
		'com/blog/support/utils/JsonUtils.java',
		'com/blog/support/handlers/FilterExceptionHandler*',
		'com/blog/support/constants/SecurityConstants*',
		'com/blog/adapter/user/mapper/*',
		'com/blog/adapter/articles/mapper/*',
		'com/blog/adapter/comments/mapper/*',
		'com/blog/BlogApplication*'
]

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/reports/jacoco")
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: excludedClassDirectories)
		}))
	}
}


jacocoTestCoverageVerification {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: excludedClassDirectories)
		}))
	}
	violationRules {
		rule {
			limit {
				minimum = 0.85
				counter = 'LINE'
				value = 'COVEREDRATIO'
			}
		}
		rule {
			limit {
				minimum = 0.85
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
			}
		}
	}
}

jacocoTestReport {
	dependsOn test
}


flyway {
	url = 'jdbc:mysql://localhost:3337/blog?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&connectionCollation=utf8mb4_bin&useServerPrepStmts=false&rewriteBatchedStatements=true&createDatabaseIfNotExist=true'
	user = 'root'
	password = 'p@ssword'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
ext {
	set('mapstructVersion', "1.5.2.Final")
	set('lombokVersion', "1.18.20")
	set('lombokMapstructBindingVersion', "0.2.0")
}

dependencies {
	implementation "org.mapstruct:mapstruct:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}", "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.0'
	implementation 'com.vladsch.flexmark:flexmark-all:0.36.8'
	implementation 'io.jsonwebtoken:jjwt:0.9.0'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'io.springfox:springfox-swagger2:2.10.5'
	implementation 'io.springfox:springfox-swagger-ui:2.10.5'
	implementation 'javax.servlet:javax.servlet-api:4.0.1'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java:8.0.29'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
}
